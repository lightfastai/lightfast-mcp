name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"

jobs:
  # Fast feedback loop using UV (matches development workflow)
  fast-checks:
    name: Fast Checks (UV)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with cache
      run: |
        uv sync --extra dev --cache-dir ~/.cache/uv

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          nox-${{ runner.os }}-

    - name: Lint with Ruff
      run: uv run ruff check .

    - name: Format check with Ruff  
      run: uv run ruff format --check .

    - name: Fast tests
      run: |
        pip install nox
        nox -s test_fast

    - name: System verification
      run: |
        pip install nox
        nox -s verify_system

  # Comprehensive testing across Python versions using nox (optimized)
  comprehensive-tests:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: [fast-checks]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.12", "3.13"]  # Reduced from 4 to 3 versions for performance

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          nox-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Run comprehensive tests
      run: nox --session "test-${{ matrix.python-version }}"

  # Integration testing for CLI and real workflows
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [fast-checks]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with cache
      run: |
        uv sync --extra dev --cache-dir ~/.cache/uv

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          nox-${{ runner.os }}-

    - name: Test CLI commands (orchestrator)
      run: |
        # Test main CLI functionality with new orchestrator command
        uv run lightfast-mcp-orchestrator init
        uv run lightfast-mcp-orchestrator list
        
        # Test orchestrator workflow
        timeout 30s uv run lightfast-mcp-orchestrator start mock-server --verbose &
        ORCHESTRATOR_PID=$!
        sleep 5  # Let server start
        kill $ORCHESTRATOR_PID || true
        
        # Test legacy manager alias still works
        uv run lightfast-mcp-manager --help

    - name: Test development workflows
      run: |
        # Test taskipy integration
        uv run task lint
        uv run task format --check
        uv run task demo
        
    - name: Integration test suite
      run: |
        pip install nox
        nox -s test_integration

    - name: Coverage report
      run: |
        pip install nox
        nox -s test_coverage
        uv run coverage xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Combined static analysis and security checks
  static-analysis:
    name: Static Analysis & Security
    runs-on: ubuntu-latest
    needs: [fast-checks]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          nox-${{ runner.os }}-

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Type check with mypy
      run: nox -s typecheck

    - name: Security check with bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # End-to-end testing for full system workflows (optimized)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    timeout-minutes: 10  # Reduced from 15 minutes
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with cache
      run: |
        uv sync --extra dev --cache-dir ~/.cache/uv

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          nox-${{ runner.os }}-

    - name: Run E2E tests with nox
      run: |
        pip install nox
        nox -s test_e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          pytest-results.xml
          e2e-logs/

  # Package building and verification (optimized)
  build-and-verify:
    name: Build & Verify Package
    runs-on: ubuntu-latest
    needs: [fast-checks]  # Removed comprehensive-tests dependency for performance
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Build package with uv
      run: |
        uv build
        
    - name: Verify package contents
      run: |
        pip install twine
        twine check dist/*
        
    - name: Test package installation
      run: |
        # Test package can be installed and imported
        uv pip install dist/*.whl --system
        python -c "import lightfast_mcp; print('Package imported successfully')"
        
        # Test CLI script works (both new and legacy)
        lightfast-mcp-orchestrator --help
        lightfast-mcp-manager --help
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # Cross-platform tests (streamlined for performance)
  cross-platform-tests:
    name: Cross Platform Tests
    runs-on: ${{ matrix.os }}
    needs: [fast-checks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]  # Removed windows-latest for performance
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with cache
      run: |
        uv sync --extra dev --cache-dir ~/.cache/uv

    - name: Cache nox environments
      uses: actions/cache@v4
      with:
        path: .nox
        key: nox-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          nox-${{ runner.os }}-

    - name: Run core tests
      run: |
        pip install nox
        nox -s verify_system

    - name: Test CLI on ${{ matrix.os }}
      run: |
        uv run lightfast-mcp-orchestrator init
        uv run lightfast-mcp-orchestrator list 